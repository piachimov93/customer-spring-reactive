version: '3.8'

services:
  config-server:
    image: spring-config:latest
    ports:
      - "8071:8071"
    networks:
      - backend

  eureka-server:
    image: eureka-server:latest
    ports:
      - "8070:8070"
    environment:
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8071"
      - "SPRING_PROFILES_ACTIVE=dev"
    networks:
      - backend
    depends_on:
      database:
        condition: service_healthy
      databaseUser:
        condition: service_healthy
      config-server:
        condition: service_started

  gateway-server:
    image: api-gateway:latest
    ports:
      - "8072:8072"
    environment:
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8071"
      - "SPRING_PROFILES_ACTIVE=dev"
    networks:
      - backend
    depends_on:
      database:
        condition: service_healthy
      databaseUser:
        condition: service_healthy
      config-server:
        condition: service_started
      eureka-server:
        condition: service_started

  customer-reactive:
    image: customer-reactive:latest
    environment:
      - "SPRING_PROFILES_ACTIVE=dev"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8071"
      - "SERVER_PORT=0"
    networks:
      - backend
#    deploy:
#      mode: replicated
#      replicas: 3
    depends_on:
      config-server:
        condition: service_started
      database:
        condition: service_healthy
      gateway-server:
        condition: service_started

  authentication-server:
    image: authentication-server:latest
    environment:
      - "SPRING_PROFILES_ACTIVE=dev"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8071"
    networks:
      - backend
    depends_on:
      config-server:
        condition: service_started
      databaseUser:
        condition: service_healthy

  database:
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: customer_db
      POSTGRES_USER: customer_user
      POSTGRES_PASSWORD: password
    volumes:
      - .docker/postgres/customer/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5435:5432"
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - backend

  databaseUser:
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: user_db
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
    volumes:
      - .docker/postgres/user/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5436:5432"
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - backend

networks:
  backend:
    driver: bridge